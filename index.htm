<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Quản Lý Kho Hàng Đơn Giản</title>
    <!-- Tải Tailwind CSS CDN để tạo giao diện nhanh và đẹp -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap');
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f4f7f9;
        }
        .container-card {
            background: white;
            padding: 1.5rem;
            border-radius: 0.75rem;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1);
        }
        .btn-primary {
            transition: all 0.15s ease;
            background-color: #4f46e5;
            color: white;
            border-radius: 0.5rem;
            padding: 0.5rem 1rem;
            font-weight: 600;
        }
        .btn-primary:hover {
            background-color: #4338ca;
            transform: translateY(-1px);
        }
        .btn-success { background-color: #10b981; }
        .btn-success:hover { background-color: #059669; }
        .btn-danger { background-color: #ef4444; }
        .btn-danger:hover { background-color: #dc2626; }
        input[type="number"]::-webkit-inner-spin-button,
        input[type="number"]::-webkit-outer-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }
        input[type="number"] {
            -moz-appearance: textfield;
        }
    </style>
</head>
<body class="p-4 md:p-8 min-h-screen">

    <div id="loading-indicator" class="fixed inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center z-50 hidden">
        <div class="bg-white p-6 rounded-lg shadow-xl flex items-center">
            <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-indigo-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            <span class="text-gray-700">Đang tải dữ liệu và xác thực...</span>
        </div>
    </div>

    <header class="mb-8">
        <h1 class="text-3xl font-bold text-gray-800 mb-2">Hệ Thống Quản Lý Kho Đơn Giản</h1>
        <p class="text-gray-500">Dành cho dưới 100 sản phẩm. Dữ liệu được lưu trữ trực tuyến.</p>
        <div id="user-info" class="text-sm text-gray-600 mt-2 p-2 bg-indigo-50 rounded-lg">
            <span id="user-status">Đang tải...</span>
            <br>
            <span id="user-id">ID Người Dùng: Đang xác thực...</span>
        </div>
    </header>

    <main class="grid grid-cols-1 lg:grid-cols-3 gap-8">
        <!-- Khối 1: Thêm Sản Phẩm Mới -->
        <div class="lg:col-span-1 container-card h-fit">
            <h2 class="text-xl font-semibold text-indigo-600 mb-4">1. Thêm Sản Phẩm Mới</h2>
            <form id="add-product-form" class="space-y-4">
                <div>
                    <label for="product-name" class="block text-sm font-medium text-gray-700">Tên Sản Phẩm:</label>
                    <input type="text" id="product-name" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2 border">
                </div>
                <div>
                    <label for="product-sku" class="block text-sm font-medium text-gray-700">Mã SKU (Duy Nhất):</label>
                    <input type="text" id="product-sku" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2 border uppercase">
                </div>
                <div>
                    <label for="product-initial-stock" class="block text-sm font-medium text-gray-700">Tồn Kho Ban Đầu:</label>
                    <input type="number" id="product-initial-stock" value="0" min="0" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2 border">
                </div>
                <button type="submit" class="btn-primary w-full">Thêm Sản Phẩm</button>
            </form>
            <div id="add-product-message" class="mt-4 p-3 rounded-lg text-sm hidden"></div>
        </div>

        <!-- Khối 2: Quản Lý Nhập/Xuất Hàng -->
        <div class="lg:col-span-1 container-card h-fit">
            <h2 class="text-xl font-semibold text-indigo-600 mb-4">2. Nhập/Xuất Hàng</h2>
            <form id="transaction-form" class="space-y-4">
                <div>
                    <label for="transaction-product-id" class="block text-sm font-medium text-gray-700">Chọn Sản Phẩm:</label>
                    <select id="transaction-product-id" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2 border">
                        <option value="" disabled selected>-- Chọn Sản Phẩm --</option>
                    </select>
                </div>
                <div>
                    <label for="transaction-quantity" class="block text-sm font-medium text-gray-700">Số Lượng:</label>
                    <input type="number" id="transaction-quantity" min="1" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2 border">
                </div>
                <div class="flex space-x-4">
                    <button type="button" data-type="import" class="btn-primary btn-success flex-1">Nhập Hàng (+)</button>
                    <button type="button" data-type="export" class="btn-primary btn-danger flex-1">Xuất Hàng (-)</button>
                </div>
            </form>
            <div id="transaction-message" class="mt-4 p-3 rounded-lg text-sm hidden"></div>
        </div>

        <!-- Khối 3: Tồn Kho Tổng Hợp -->
        <div class="lg:col-span-3 container-card">
            <h2 class="text-xl font-semibold text-indigo-600 mb-4">3. Tồn Kho Hiện Tại (Cập nhật Real-time)</h2>
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Tên Sản Phẩm</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Mã SKU</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Tồn Kho</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Cập Nhật Cuối</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Hành Động</th>
                        </tr>
                    </thead>
                    <tbody id="inventory-list" class="bg-white divide-y divide-gray-200">
                        <!-- Dữ liệu tồn kho sẽ được chèn vào đây bởi JavaScript -->
                        <tr>
                            <td colspan="5" class="px-6 py-4 text-sm text-center text-gray-500">Chưa có sản phẩm nào được thêm.</td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <p id="no-product-message" class="text-center text-gray-500 mt-4 hidden">Chưa có sản phẩm nào được thêm.</p>
        </div>
    </main>

    <!-- Modal tùy chỉnh cho thông báo -->
    <div id="custom-modal" class="fixed inset-0 bg-gray-900 bg-opacity-70 hidden items-center justify-center z-50">
        <div class="bg-white p-6 rounded-lg shadow-2xl max-w-sm w-full">
            <h3 id="modal-title" class="text-xl font-bold mb-3 text-gray-800">Thông Báo</h3>
            <p id="modal-content" class="text-gray-600 mb-4"></p>
            <button id="modal-close-btn" class="btn-primary bg-indigo-500 hover:bg-indigo-600 w-full">Đóng</button>
        </div>
    </div>

    <!-- Firebase Script -->
    <script type="module">
        import { initializeApp, setLogLevel } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, doc, setDoc, updateDoc, onSnapshot, collection, query, serverTimestamp, runTransaction } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // Bật chế độ Debug cho Firebase
        setLogLevel('debug');

        // ====================================================================================================
        // !!! BƯỚC CẦN THIẾT NẾU CHẠY BÊN NGOÀI MÔI TRƯỜNG CANVAS (ví dụ: GitHub Pages) !!!
        // Cấu hình Firebase này KHÔNG được cung cấp khi chạy trực tiếp trên Chrome.
        // Vui lòng truy cập Firebase Console của bạn, tạo một ứng dụng Web, và dán
        // cấu hình của bạn vào khối bên dưới (thay thế YOUR_API_KEY, YOUR_PROJECT_ID, v.v.).
        // ====================================================================================================
        const MANUAL_FIREBASE_CONFIG = {
            import { initializeApp } from "firebase/app";
// TODO: Add SDKs for Firebase products that you want to use
// https://firebase.google.com/docs/web/setup#available-libraries

// Your web app's Firebase configuration
const firebaseConfig = {
  apiKey: "AIzaSyCrzfouo7m58EpdWP67h9JAbPt51nah_Ag",
  authDomain: "web-ban-hang-2025.firebaseapp.com",
  projectId: "web-ban-hang-2025",
  storageBucket: "web-ban-hang-2025.firebasestorage.app",
  messagingSenderId: "339524592053",
  appId: "1:339524592053:web:c7e070ffecf8302539f9fc"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
        };
        // ====================================================================================================

        // Các biến toàn cục được cung cấp bởi môi trường Canvas
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-inventory-app';
        const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;
        
        let firebaseConfig;
        if (typeof __firebase_config !== 'undefined' && __firebase_config) {
            // Nếu chạy trong Canvas, sử dụng cấu hình được cung cấp
            firebaseConfig = JSON.parse(__firebase_config);
        } else {
            // Nếu chạy độc lập, sử dụng cấu hình thủ công và cảnh báo người dùng
            console.warn("Sử dụng CẤU HÌNH FIREBASE THỦ CÔNG. Vui lòng cập nhật các giá trị YOUR_... nếu chạy độc lập!");
            firebaseConfig = MANUAL_FIREBASE_CONFIG;
        }

        let app, db, auth;
        let userId = null;
        let isAuthReady = false;

        const loadingIndicator = document.getElementById('loading-indicator');
        const userInfo = document.getElementById('user-info');
        const userStatusSpan = document.getElementById('user-status');
        const userIdSpan = document.getElementById('user-id');
        const inventoryListBody = document.getElementById('inventory-list');
        const transactionProductIdSelect = document.getElementById('transaction-product-id');
        const transactionMessageDiv = document.getElementById('transaction-message');

        // --- Hàm Utility cho UI ---

        function showCustomModal(title, content) {
            document.getElementById('modal-title').textContent = title;
            document.getElementById('modal-content').textContent = content;
            document.getElementById('custom-modal').classList.remove('hidden');
            document.getElementById('custom-modal').classList.add('flex');
        }

        document.getElementById('modal-close-btn').addEventListener('click', () => {
            document.getElementById('custom-modal').classList.add('hidden');
            document.getElementById('custom-modal').classList.remove('flex');
        });

        function showLoading(show) {
            loadingIndicator.classList.toggle('hidden', !show);
        }

        function displayMessage(element, message, isError = false) {
            element.textContent = message;
            element.classList.remove('hidden', 'bg-red-100', 'bg-green-100', 'text-red-700', 'text-green-700');
            if (isError) {
                element.classList.add('bg-red-100', 'text-red-700');
            } else {
                element.classList.add('bg-green-100', 'text-green-700');
            }
            setTimeout(() => {
                element.classList.add('hidden');
            }, 5000);
        }

        // --- Khởi tạo Firebase và Xác thực ---

        async function initFirebase() {
            showLoading(true);
            try {
                // Kiểm tra xem người dùng đã thay thế cấu hình Placeholder chưa nếu chạy độc lập
                if (firebaseConfig.apiKey === "YOUR_API_KEY") {
                    throw new Error("Cấu hình Firebase không hợp lệ. Vui lòng thay thế các giá trị YOUR_... trong khối MANUAL_FIREBASE_CONFIG bằng cấu hình thực tế của bạn.");
                }

                app = initializeApp(firebaseConfig);
                db = getFirestore(app);
                auth = getAuth(app);

                userStatusSpan.textContent = 'Đang xác thực...';

                // Lắng nghe trạng thái xác thực
                onAuthStateChanged(auth, async (user) => {
                    if (user) {
                        userId = user.uid;
                        isAuthReady = true;
                        userStatusSpan.textContent = 'Đã xác thực!';
                        userIdSpan.textContent = `ID Người Dùng: ${userId}`;
                        console.log("Firestore initialized. User ID:", userId);
                        
                        // Sau khi xác thực, bắt đầu lắng nghe dữ liệu
                        setupRealtimeListener();

                    } else {
                        // Nếu không có token, đăng nhập ẩn danh
                        try {
                            await signInAnonymously(auth);
                            // onAuthStateChanged sẽ tự động kích hoạt lại với user mới
                        } catch (error) {
                            console.error("Lỗi đăng nhập ẩn danh:", error);
                            userStatusSpan.textContent = 'Lỗi xác thực!';
                            userIdSpan.textContent = `Vui lòng kiểm tra console.`;
                            showCustomModal('Lỗi Xác Thực', 'Không thể đăng nhập vào hệ thống. Vui lòng kiểm tra console log.');
                        }
                    }
                    showLoading(false);
                });

                // Nếu có token tùy chỉnh (chỉ trong môi trường Canvas), sử dụng nó để đăng nhập
                if (initialAuthToken) {
                    await signInWithCustomToken(auth, initialAuthToken);
                }
            } catch (error) {
                console.error("Lỗi khởi tạo Firebase:", error);
                // Cập nhật thông báo lỗi để hướng dẫn người dùng kiểm tra cấu hình
                showCustomModal('Lỗi Hệ Thống', `Không thể khởi tạo Firebase. Vui lòng kiểm tra console log và đảm bảo bạn đã cung cấp cấu hình Firebase của mình nếu chạy độc lập. Chi tiết: ${error.message}`);
                showLoading(false);
            }
        }

        // --- Chức năng Firestore ---

        function getCollectionPath() {
            if (!userId) {
                console.error("Lỗi: User ID chưa sẵn sàng.");
                return null;
            }
            // Dữ liệu riêng tư, sử dụng path /artifacts/{appId}/users/{userId}/inventory_management
            return `artifacts/${appId}/users/${userId}/inventory_management`;
        }

        /**
         * Thêm sản phẩm mới vào Firestore
         */
        document.getElementById('add-product-form').addEventListener('submit', async (e) => {
            e.preventDefault();
            if (!isAuthReady) {
                showCustomModal('Lỗi', 'Hệ thống đang chờ xác thực. Vui lòng đợi.');
                return;
            }

            const name = document.getElementById('product-name').value.trim();
            const sku = document.getElementById('product-sku').value.trim().toUpperCase();
            const initialStock = parseInt(document.getElementById('product-initial-stock').value);
            const messageDiv = document.getElementById('add-product-message');

            if (sku.includes('/') || sku.includes('.') || sku.includes('#') || sku.includes('[') || sku.includes(']')) {
                displayMessage(messageDiv, 'Mã SKU không được chứa các ký tự đặc biệt như /, ., #, [, ].', true);
                return;
            }

            const path = getCollectionPath();
            if (!path) return;

            showLoading(true);

            try {
                const productDocRef = doc(db, path, sku);
                await setDoc(productDocRef, {
                    name: name,
                    sku: sku,
                    currentStock: initialStock,
                    lastUpdated: serverTimestamp()
                }, { merge: false }); // merge: false đảm bảo ghi đè nếu SKU đã tồn tại

                displayMessage(messageDiv, `Đã thêm sản phẩm "${name}" thành công!`, false);
                document.getElementById('add-product-form').reset();
            } catch (error) {
                console.error("Lỗi khi thêm sản phẩm:", error);
                displayMessage(messageDiv, `Lỗi: Không thể thêm sản phẩm. Mã SKU có thể đã tồn tại. ${error.message}`, true);
            } finally {
                showLoading(false);
            }
        });

        /**
         * Xử lý giao dịch Nhập/Xuất hàng
         */
        document.getElementById('transaction-form').addEventListener('click', async (e) => {
            const path = getCollectionPath();
            if (!path || !isAuthReady) {
                showCustomModal('Lỗi', 'Hệ thống chưa sẵn sàng hoặc User ID không tồn tại.');
                return;
            }

            const type = e.target.getAttribute('data-type');
            if (type !== 'import' && type !== 'export') return;

            const productId = transactionProductIdSelect.value;
            const quantityInput = document.getElementById('transaction-quantity');
            const quantity = parseInt(quantityInput.value);
            const messageDiv = document.getElementById('transaction-message');

            if (!productId) {
                displayMessage(messageDiv, 'Vui lòng chọn sản phẩm.', true);
                return;
            }
            if (isNaN(quantity) || quantity <= 0) {
                displayMessage(messageDiv, 'Số lượng phải là một số dương.', true);
                return;
            }

            const stockChange = type === 'import' ? quantity : -quantity;
            const productDocRef = doc(db, path, productId);

            showLoading(true);

            try {
                await runTransaction(db, async (transaction) => {
                    const productDoc = await transaction.get(productDocRef);

                    if (!productDoc.exists()) {
                        throw new Error("Sản phẩm không tồn tại.");
                    }

                    const currentStock = productDoc.data().currentStock || 0;
                    const newStock = currentStock + stockChange;
                    const productName = productDoc.data().name;

                    if (newStock < 0) {
                        throw new Error(`Kho không đủ hàng! Tồn kho hiện tại: ${currentStock}. Không thể xuất ${quantity}.`);
                    }

                    transaction.update(productDocRef, {
                        currentStock: newStock,
                        lastUpdated: serverTimestamp()
                    });

                    // Có thể thêm logic lưu trữ lịch sử giao dịch ở đây nếu cần (ví dụ: collection 'transactions')
                    // Nhưng để giữ đơn giản, ta chỉ cập nhật tồn kho.
                    
                    if (type === 'import') {
                        displayMessage(messageDiv, `Đã nhập thêm ${quantity} sản phẩm "${productName}". Tồn mới: ${newStock}`, false);
                    } else {
                        displayMessage(messageDiv, `Đã xuất ${quantity} sản phẩm "${productName}". Tồn mới: ${newStock}`, false);
                    }

                    quantityInput.value = '';

                });
            } catch (error) {
                console.error("Lỗi giao dịch Nhập/Xuất:", error);
                displayMessage(messageDiv, `Lỗi giao dịch: ${error.message}`, true);
            } finally {
                showLoading(false);
            }
        });

        /**
         * Thiết lập lắng nghe dữ liệu thời gian thực (Real-time Listener)
         */
        function setupRealtimeListener() {
            const path = getCollectionPath();
            if (!path) return;
            
            const productsColRef = collection(db, path);
            const q = query(productsColRef);

            onSnapshot(q, (snapshot) => {
                let html = '';
                const selectOptions = ['<option value="" disabled selected>-- Chọn Sản Phẩm --</option>'];
                const productCount = snapshot.size;

                snapshot.forEach((doc) => {
                    const data = doc.data();
                    const productId = doc.id;
                    const lastUpdate = data.lastUpdated?.toDate ? data.lastUpdated.toDate().toLocaleTimeString('vi-VN') : 'N/A';
                    
                    html += `
                        <tr class="hover:bg-gray-50">
                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${data.name}</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 font-mono">${data.sku}</td>
                            <td class="px-6 py-4 whitespace-nowrap text-lg font-bold text-center ${data.currentStock <= 5 ? 'text-red-500' : 'text-green-600'}">${data.currentStock}</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${lastUpdate}</td>
                            <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                <button onclick="deleteProduct('${productId}')" class="text-red-600 hover:text-red-900 focus:outline-none">Xóa</button>
                            </td>
                        </tr>
                    `;

                    selectOptions.push(`<option value="${productId}">${data.name} (${data.sku}) - Tồn: ${data.currentStock}</option>`);
                });

                // Cập nhật bảng tồn kho
                inventoryListBody.innerHTML = html || `<tr><td colspan="5" class="px-6 py-4 text-sm text-center text-gray-500">Chưa có sản phẩm nào được thêm.</td></tr>`;
                
                // Cập nhật danh sách chọn cho giao dịch
                transactionProductIdSelect.innerHTML = selectOptions.join('');

                // Ẩn/hiện thông báo không có sản phẩm
                document.getElementById('no-product-message').classList.toggle('hidden', productCount > 0);
            }, (error) => {
                console.error("Lỗi lắng nghe dữ liệu:", error);
                showCustomModal('Lỗi Dữ Liệu', 'Không thể tải dữ liệu tồn kho theo thời gian thực.');
            });
        }
        
        /**
         * Chức năng xóa sản phẩm (được gọi từ HTML)
         */
        window.deleteProduct = async function(productId) {
            if (!confirm('Bạn có chắc chắn muốn xóa sản phẩm này không? Hành động này không thể hoàn tác.')) {
                return;
            }

            const path = getCollectionPath();
            if (!path || !isAuthReady) {
                showCustomModal('Lỗi', 'Hệ thống chưa sẵn sàng.');
                return;
            }

            showLoading(true);
            try {
                const productDocRef = doc(db, path, productId);
                await setDoc(productDocRef, { deleted: true, currentStock: 0, lastUpdated: serverTimestamp() }, { merge: true });
                showCustomModal('Thành Công', `Đã đánh dấu xóa sản phẩm có Mã SKU: ${productId}. (Dữ liệu vẫn được giữ, tồn kho set về 0)`);
                // Trong thực tế, bạn sẽ dùng deleteDoc(productDocRef)
            } catch (error) {
                console.error("Lỗi khi xóa sản phẩm:", error);
                showCustomModal('Lỗi Xóa', `Không thể xóa sản phẩm: ${error.message}`);
            } finally {
                showLoading(false);
            }
        }


        // Khởi động ứng dụng
        window.onload = initFirebase;
    </script>
</body>
</html>
